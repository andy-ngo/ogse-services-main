#include <iostream>
#include <string>
#include <vector>
#include <NDTime.hpp>

#include <external/json.hpp>
#include <web/web_logger.hpp>
#include <web/web_ports.hpp>
#include <web/web_model.hpp>
#include <web/web_results.hpp>
#include <web/web_tools.hpp>

${include_sources}

using json = nlohmann::json;

int main(int argc, char ** argv){
	
	try {
	    web::Ports iports_TOP = {};
	    web::Ports oports_TOP = {};
	    web::EICs eics_TOP = {};
	    web::EOCs eocs_TOP = {};
	    web::ICs ics_TOP = {};
	    web::Models submodels_TOP = {};

		std::cout << std::endl << "Reading sets of instances and relations..." << std::endl;
		json instances_set = web::tools::read_geojson("./input/auto_instances.json");
		json relations_set = web::tools::read_geojson("./input/auto_relations.json");

${include_instances_sets}

${include_relations_sets}

	    std::shared_ptr<web::coupled<NDTime>> TOP;
		TOP	= web::make_top_model<NDTime>("my_top_model", "my_top_model", submodels_TOP, iports_TOP, oports_TOP, eics_TOP, eocs_TOP, ics_TOP);

	    web::out_messages = std::ofstream("./simulation_results/output_messages.txt");
	    web::out_state = std::ofstream("./simulation_results/state_messages.txt");

	    web::runner<NDTime, web::logger_top> r(TOP, {0});

		std::cout << "Running the simulation..." << std::endl;
	    r.run_until(NDTime("2400:00:00:000"));

		std::cout << "Converting output files to the viewer format..." << std::endl;
	    web::output_results(TOP, "GIS-DEVS", "./simulation_results/");
		
		std::cout << "Done!" << std::endl;
	}
	catch (const exception& e) {
		cerr << e.what();
	}

    return 0;
}
